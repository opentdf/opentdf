keycloak:
  hostname: http://keycloak-http/auth
  adminUsername: keycloakadmin
  adminPassword: mykeycloakpassword
  customConfig:
  - name: master
    # master realm
    clients:
    - payload:
        clientId: abacus-web
        publicClient: "true"
        standardFlowEnabled: "true"
        clientAuthenticatorType: client-secret
        serviceAccountsEnabled: "true"
        protocol: openid-connect
        redirectUris:
        - "{{ externalUrl }}/*"
        webOrigins:
        - "+"
      mappers:
      - protocol: openid-connect
        config:
          id.token.claim: "false"
          access.token.claim: "true"
          included.custom.audience: "tdf-entitlement"
        name: Virtru "tdf-entitlements" Audience Mapper
        protocolMapper: oidc-audience-mapper
      - protocol: openid-connect
        config:
          id.token.claim: "false"
          access.token.claim: "true"
          included.custom.audience: "tdf-attributes"
        name: Virtru "tdf-attributes" Audience Mapper
        protocolMapper: oidc-audience-mapper
  - name: tdf
    payload:
      realm: tdf
      enabled: "true"
    clients:
#     client used by this script
    - payload:
        clientId: bootstrap-client
        secret: 123-456
        publicClient: "true"
        standardFlowEnabled: "true"
        clientAuthenticatorType: client-secret
        serviceAccountsEnabled: "true"
        baseUrl: "{{ externalUrl }}"
        protocol: openid-connect
        redirectUris:
        - "{{ externalUrl }}/*"
        webOrigins:
        - "+"
      mappers:
      - protocol: openid-connect
        config:
          id.token.claim: "false"
          access.token.claim: "true"
          included.custom.audience: "tdf-entitlement"
        name: Virtru "tdf-entitlements" Audience Mapper
        protocolMapper: oidc-audience-mapper
      - protocol: openid-connect
        config:
          id.token.claim: "false"
          access.token.claim: "true"
          included.custom.audience: "tdf-attributes"
        name: Virtru "tdf-attributes" Audience Mapper
        protocolMapper: oidc-audience-mapper
#    abacus client
    - payload:
        clientId: opentdf-abacus
        publicClient: "true"
        standardFlowEnabled: "true"
        clientAuthenticatorType: client-secret
        serviceAccountsEnabled: "true"
        protocol: openid-connect
        redirectUris:
        - "{{ externalUrl }}/*"
        webOrigins:
        - "+"
        attributes:
          post.logout.redirect.uris: "+"
      mappers:
      - protocol: openid-connect
        config:
          id.token.claim: "false"
          access.token.claim: "true"
          included.custom.audience: "tdf-entitlement"
        name: Virtru "tdf-entitlements" Audience Mapper
        protocolMapper: oidc-audience-mapper
      - protocol: openid-connect
        config:
          id.token.claim: "false"
          access.token.claim: "true"
          included.custom.audience: "tdf-attributes"
        name: Virtru "tdf-attributes" Audience Mapper
        protocolMapper: oidc-audience-mapper
#   abacus localhost client
    - payload:
        clientId: abacus-localhost
        publicClient: "true"
        standardFlowEnabled: "true"
        clientAuthenticatorType: client-secret
        serviceAccountsEnabled: "true"
        protocol: openid-connect
        redirectUris:
        - "http://localhost:3000/*"
        webOrigins:
        - "+"
        attributes:
          post.logout.redirect.uris: "+"
      mappers:
      - protocol: openid-connect
        config:
          id.token.claim: "false"
          access.token.claim: "true"
          included.custom.audience: "tdf-entitlement"
        name: Virtru "tdf-entitlements" Audience Mapper
        protocolMapper: oidc-audience-mapper
      - protocol: openid-connect
        config:
          id.token.claim: "false"
          access.token.claim: "true"
          included.custom.audience: "tdf-attributes"
        name: Virtru "tdf-attributes" Audience Mapper
        protocolMapper: oidc-audience-mapper
#  client for entitlements
    - payload:
        clientId: tdf-entitlement
        publicClient: "true"
        standardFlowEnabled: "true"
        fullScopeAllowed: "false"
        baseUrl: "{{ externalUrl }}/"
        protocol: openid-connect
        redirectUris:
        - "{{ externalUrl }}/*"
        webOrigins:
        - "+"
        attributes:
          user.info.response.signature.alg: RS256
#  client for attributes
    - payload:
        clientId: tdf-attributes
        publicClient: "true"
        standardFlowEnabled: "true"
        fullScopeAllowed: "false"
        baseUrl: "{{ externalUrl }}/"
        protocol: openid-connect
        redirectUris:
        - "{{ externalUrl }}/*"
        webOrigins:
        - "+"
        attributes:
          user.info.response.signature.alg: RS256
#  client for entity-resolution
    - payload:
        clientId: tdf-entity-resolution-service
        secret: 123-456
        publicClient: "false"
        serviceAccountsEnabled: "true"
        standardFlowEnabled: "true"
        directAccessGrantsEnabled: "true"
        clientAuthenticatorType: client-secret
        fullScopeAllowed: "true"
        baseUrl: "{{ externalUrl }}/"
        protocol: openid-connect
        redirectUris:
        - "{{ externalUrl }}/*"
        webOrigins:
        - "+"
        attributes:
          user.info.response.signature.alg: RS256
#  general test client
    - payload:
        clientId: tdf-client
        directAccessGrantsEnabled: "true"
        clientAuthenticatorType: client-secret
        secret: "123-456"
        serviceAccountsEnabled: "true"
        publicClient: "false"
        redirectUris:
        - "{{ externalUrl }}/*"
        attributes:
          user.info.response.signature.alg: RS256
      mappers:
      - protocol: openid-connect
        config:
          id.token.claim: "false"
          access.token.claim: "false"
          userinfo.token.claim: "true"
          remote.parameters.username: "true"
          remote.parameters.clientid: "true"
          client.publickey: X-VirtruPubKey
          claim.name: tdf_claims
        name: Virtru OIDC UserInfo Mapper
        protocolMapper: virtru-oidc-protocolmapper
      - protocol: openid-connect
        config:
          id.token.claim: "true"
          access.token.claim: "true"
          userinfo.token.claim: "false"
          remote.parameters.username: "true"
          remote.parameters.clientid: "true"
          client.publickey: X-VirtruPubKey
          claim.name: tdf_claims
        name: Virtru OIDC Auth Mapper
        protocolMapper: virtru-oidc-protocolmapper
      - protocol: openid-connect
        config:
          id.token.claim: "false"
          access.token.claim: "true"
          included.custom.audience: "tdf-attributes"
        name: Virtru "tdf-attributes" Audience Mapper
        protocolMapper: oidc-audience-mapper
# client for dcr-test
    - payload:
        clientId: dcr-test
        secret: 123-456
        publicClient: "true"
        standardFlowEnabled: "true"
        clientAuthenticatorType: client-secret
        serviceAccountsEnabled: "true"
        baseUrl: "{{ externalUrl }}"
        protocol: openid-connect
        redirectUris:
        - "{{ externalUrl }}/*"
        webOrigins:
        - "+"
        attributes:
          post.logout.redirect.uris: "+"
      mappers:
      - protocol: openid-connect
        config:
          id.token.claim: "false"
          access.token.claim: "true"
          included.custom.audience: "tdf-entitlement"
        name: Virtru "tdf-entitlements" Audience Mapper
        protocolMapper: oidc-audience-mapper
      - protocol: openid-connect
        config:
          id.token.claim: "false"
          access.token.claim: "true"
          included.custom.audience: "tdf-attributes"
        name: Virtru "tdf-attributes" Audience Mapper
        protocolMapper: oidc-audience-mapper
      - protocol: openid-connect
        config:
          id.token.claim: "false"
          access.token.claim: "false"
          userinfo.token.claim: "true"
          remote.parameters.username: "true"
          remote.parameters.clientid: "true"
          client.publickey: X-VirtruPubKey
          claim.name: tdf_claims
        name: Virtru OIDC UserInfo Mapper
        protocolMapper: virtru-oidc-protocolmapper
      - protocol: openid-connect
        config:
          id.token.claim: "true"
          access.token.claim: "true"
          userinfo.token.claim: "false"
          remote.parameters.username: "true"
          remote.parameters.clientid: "true"
          client.publickey: X-VirtruPubKey
          claim.name: tdf_claims
        name: Virtru OIDC Auth Mapper
        protocolMapper: virtru-oidc-protocolmapper

    users:
# general test users
    - payload:
        username: user1
        enabled: "true"
        credentials:
        - value: testuser123
          type: password
      roles:
      - view-clients
      - view-users
    - payload:
        username: user2
        enabled: "true"
        credentials:
        - value: testuser123
          type: password
      roles:
      - view-clients
      - view-users

attributes:
  hostname: http://attributes:4020
  realm: tdf
  clientId: bootstrap-client
  username: user1
  password: testuser123
  preloadedAuthorities:
    - https://example.com
  preloadedAttributes:
  # general testing attributes
  - authority: https://example.com
    name: Classification
    rule: hierarchy
    state: published
    order: 
    - TS
    - S
    - C
    - U
  - authority: https://example.com
    name: COI
    rule: allOf
    state: published
    order: 
    - PRX
    - PRA
    - PRB
    - PRC
    - PRD
    - PRF

entitlements:
  hostname: http://entitlements:4030
  realms:
  - name: tdf
    clientId: bootstrap-client
    username: user1
    password: testuser123
    preloadedClaims:
      alice:
        - https://example.com/attr/AudienceGuidance/value/Restricted
        - https://example.com/attr/ContentExclusivity/value/Premium
      bob:
        - https://example.com/attr/AudienceGuidance/value/All
        - https://example.com/attr/ContentExclusivity/value/Premium
      examples-webcam-app:
        - https://example.com/attr/AudienceGuidance/value/Restricted
        - https://example.com/attr/ContentExclusivity/value/Deluxe
      tdf-client:
        - https://example.com/attr/Classification/value/S
        - https://example.com/attr/COI/value/PRX
        - https://example.com/attr/Env/value/CleanRoom

opentdf:
  externalUrl: http://localhost:65432

job:
  backoffLimit: 1