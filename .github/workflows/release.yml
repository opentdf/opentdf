name: Release
on:
  pull_request:
    types: [closed]
    branches:
      - main
jobs:
  job:
    permissions:
      contents: write
      pull-requests: read
    name: Create Release
    if: github.event.pull_request.merged == true && (startsWith(github.head_ref, 'rc/') || startsWith(github.head_ref, 'pre-rc/'))
    runs-on: ubuntu-latest
    steps:
      - name: Get Release
        env:
          GH_TOKEN: ${{ github.token }}
        id: release_id
        run: |
          echo "RELEASE_REF=$(gh api \
          -H "Accept: application/vnd.github+json" \
          /repos/${{ github.repository }}/pulls/${{ github.event.number }} | jq '.head.ref')" >> $GITHUB_OUTPUT

      - name: Get Release version
        id: version
        env:
          condition: ${{ startsWith(github.head_ref, 'rc/') }}
          ref: ${{ steps.release_id.outputs.RELEASE_REF }}
        run: |
          echo "VERSION=$(echo ${{ steps.release_id.outputs.RELEASE_REF }} | sed -r "s/^(pre-)?rc\///")" >> $GITHUB_OUTPUT

      - name: Get version
        run: echo ${{ steps.version.outputs.VERSION }}

      - name: Create release
        uses: softprops/action-gh-release@v0.1.15
        with:
          # Gives the release a custom name. Defaults to tag name
          name: OpenTDF ${{ steps.version.outputs.VERSION }}

          # Gives a tag name. Defaults to github.GITHUB_REF
          tag_name: ${{ steps.version.outputs.VERSION }}

          # Creates a draft release. Defaults to false
          draft: false # ${{ inputs.isDraft }}

          # Identify the release as a prerelease. Defaults to false
          prerelease: ${{ startsWith(github.head_ref, 'pre-rc/') }}

          # Note-worthy description of changes in release
          # body: # optional

          # Path to load note-worthy description of changes in release from
          # body_path: # optional

          # Newline-delimited list of path globs for asset files to upload
          # files: # optional

          # Fails if any of the `files` globs match nothing. Defaults to false
          # fail_on_unmatched_files: # optional

          # Repository to make releases against, in <owner>/<repo> format
          # repository: # optional

          # Authorized secret GitHub Personal Access Token. Defaults to github.token
          token: ${{ github.token }}

          # Commitish value that determines where the Git tag is created from. Can be any branch or commit SHA.
          # target_commitish: # optional

          # If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. If there is already a discussion linked to the release, this parameter is ignored.
          # discussion_category_name: # optional

          # Whether to automatically generate the name and body for this release. If name is specified, the specified name will be used; otherwise, a name will be automatically generated. If body is specified, the body will be pre-pended to the automatically generated notes.
          generate_release_notes: true

          # Append to existing body instead of overwriting it. Default is false.
          append_body: true
