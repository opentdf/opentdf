keycloak:
  hostname: http://keycloak-http/auth
  adminUsername: keycloakadmin
  adminPassword: mykeycloakpassword
  customConfig:
  - name: tdf
    payload:
      realm: tdf
      enabled: "true"
    clients:
#     client used by this script
    - payload:
        clientId: bootstrap-client
        secret: 123-456
        publicClient: "true"
        standardFlowEnabled: "true"
        clientAuthenticatorType: client-secret
        serviceAccountsEnabled: "true"
        baseUrl: "{{ externalUrl }}"
        protocol: openid-connect
        redirectUris:
        - "{{ externalUrl }}/*"
        webOrigins:
        - "+"
      mappers:
      - protocol: openid-connect
        config:
          id.token.claim: "false"
          access.token.claim: "true"
          included.custom.audience: "tdf-entitlement"
        name: Virtru "tdf-entitlements" Audience Mapper
        protocolMapper: oidc-audience-mapper
      - protocol: openid-connect
        config:
          id.token.claim: "false"
          access.token.claim: "true"
          included.custom.audience: "tdf-attributes"
        name: Virtru "tdf-attributes" Audience Mapper
        protocolMapper: oidc-audience-mapper
#    abacus client
    - payload:
        clientId: opentdf-abacus
        publicClient: "true"
        standardFlowEnabled: "true"
        clientAuthenticatorType: client-secret
        serviceAccountsEnabled: "true"
        protocol: openid-connect
        redirectUris:
        - "{{ externalUrl }}/*"
        webOrigins:
        - "+"
        attributes:
          post.logout.redirect.uris: "+"
      mappers:
      - protocol: openid-connect
        config:
          id.token.claim: "false"
          access.token.claim: "true"
          included.custom.audience: "tdf-entitlement"
        name: Virtru "tdf-entitlements" Audience Mapper
        protocolMapper: oidc-audience-mapper
      - protocol: openid-connect
        config:
          id.token.claim: "false"
          access.token.claim: "true"
          included.custom.audience: "tdf-attributes"
        name: Virtru "tdf-attributes" Audience Mapper
        protocolMapper: oidc-audience-mapper
#    webcam client
    - payload:
        clientId: examples-webcam-app
        publicClient: "true"
        standardFlowEnabled: "true"
        clientAuthenticatorType: client-secret
        serviceAccountsEnabled: "true"
        protocol: openid-connect
        redirectUris:
        - "http://localhost:3000/*"
        - "http://localhost:65432/*"
        webOrigins:
        - "+"
        attributes:
          post.logout.redirect.uris: "+"
      mappers:
      - protocol: openid-connect
        config:
          id.token.claim: "false"
          access.token.claim: "false"
          userinfo.token.claim: "true"
          remote.parameters.username: "true"
          remote.parameters.clientid: "true"
          client.publickey: X-VirtruPubKey
          claim.name: tdf_claims
        name: Virtru OIDC UserInfo Mapper
        protocolMapper: virtru-oidc-protocolmapper
      - protocol: openid-connect
        config:
          id.token.claim: "true"
          access.token.claim: "true"
          userinfo.token.claim: "false"
          remote.parameters.username: "true"
          remote.parameters.clientid: "true"
          client.publickey: X-VirtruPubKey
          claim.name: tdf_claims
        name: Virtru OIDC Auth Mapper
        protocolMapper: virtru-oidc-protocolmapper
#   abacus localhost client
    - payload:
        clientId: abacus-localhost
        publicClient: "true"
        standardFlowEnabled: "true"
        clientAuthenticatorType: client-secret
        serviceAccountsEnabled: "true"
        protocol: openid-connect
        redirectUris:
        - "http://localhost:3000/*"
        webOrigins:
        - "+"
        attributes:
          post.logout.redirect.uris: "+"
      mappers:
      - protocol: openid-connect
        config:
          id.token.claim: "false"
          access.token.claim: "true"
          included.custom.audience: "tdf-entitlement"
        name: Virtru "tdf-entitlements" Audience Mapper
        protocolMapper: oidc-audience-mapper
      - protocol: openid-connect
        config:
          id.token.claim: "false"
          access.token.claim: "true"
          included.custom.audience: "tdf-attributes"
        name: Virtru "tdf-attributes" Audience Mapper
        protocolMapper: oidc-audience-mapper
#  client for entitlements
    - payload:
        clientId: tdf-entitlement
        publicClient: "true"
        standardFlowEnabled: "true"
        fullScopeAllowed: "false"
        baseUrl: "{{ externalUrl }}/"
        protocol: openid-connect
        redirectUris:
        - "{{ externalUrl }}/*"
        webOrigins:
        - "+"
        attributes:
          user.info.response.signature.alg: RS256
#  client for attributes
    - payload:
        clientId: tdf-attributes
        publicClient: "true"
        standardFlowEnabled: "true"
        fullScopeAllowed: "false"
        baseUrl: "{{ externalUrl }}/"
        protocol: openid-connect
        redirectUris:
        - "{{ externalUrl }}/*"
        webOrigins:
        - "+"
        attributes:
          user.info.response.signature.alg: RS256
#  general test client
    - payload:
        clientId: tdf-client
        directAccessGrantsEnabled: "true"
        clientAuthenticatorType: client-secret
        secret: "123-456"
        serviceAccountsEnabled: "true"
        publicClient: "false"
        redirectUris:
        - "{{ externalUrl }}/*"
        attributes:
          user.info.response.signature.alg: RS256
      mappers:
      - protocol: openid-connect
        config:
          id.token.claim: "false"
          access.token.claim: "false"
          userinfo.token.claim: "true"
          remote.parameters.username: "true"
          remote.parameters.clientid: "true"
          client.publickey: X-VirtruPubKey
          claim.name: tdf_claims
        name: Virtru OIDC UserInfo Mapper
        protocolMapper: virtru-oidc-protocolmapper
      - protocol: openid-connect
        config:
          id.token.claim: "true"
          access.token.claim: "true"
          userinfo.token.claim: "false"
          remote.parameters.username: "true"
          remote.parameters.clientid: "true"
          client.publickey: X-VirtruPubKey
          claim.name: tdf_claims
        name: Virtru OIDC Auth Mapper
        protocolMapper: virtru-oidc-protocolmapper
      - protocol: openid-connect
        config:
          id.token.claim: "false"
          access.token.claim: "true"
          included.custom.audience: "tdf-attributes"
        name: Virtru "tdf-attributes" Audience Mapper
        protocolMapper: oidc-audience-mapper
# client for abacship backend
    - payload:
        clientId: abachsip-backend-client
        secret: 123-456
        publicClient: "true"
        standardFlowEnabled: "true"
        clientAuthenticatorType: client-secret
        serviceAccountsEnabled: "true"
        baseUrl: "{{ externalUrl }}"
        protocol: openid-connect
        redirectUris:
        - "{{ externalUrl }}/*"
        webOrigins:
        - "+"
        attributes:
          post.logout.redirect.uris: "+"
      mappers:
      - protocol: openid-connect
        config:
          id.token.claim: "false"
          access.token.claim: "true"
          included.custom.audience: "tdf-entitlement"
        name: Virtru "tdf-entitlements" Audience Mapper
        protocolMapper: oidc-audience-mapper
      - protocol: openid-connect
        config:
          id.token.claim: "false"
          access.token.claim: "true"
          included.custom.audience: "tdf-attributes"
        name: Virtru "tdf-attributes" Audience Mapper
        protocolMapper: oidc-audience-mapper
      - protocol: openid-connect
        config:
          id.token.claim: "false"
          access.token.claim: "false"
          userinfo.token.claim: "true"
          remote.parameters.username: "true"
          remote.parameters.clientid: "true"
          client.publickey: X-VirtruPubKey
          claim.name: tdf_claims
        name: Virtru OIDC UserInfo Mapper
        protocolMapper: virtru-oidc-protocolmapper
      - protocol: openid-connect
        config:
          id.token.claim: "true"
          access.token.claim: "true"
          userinfo.token.claim: "false"
          remote.parameters.username: "true"
          remote.parameters.clientid: "true"
          client.publickey: X-VirtruPubKey
          claim.name: tdf_claims
        name: Virtru OIDC Auth Mapper
        protocolMapper: virtru-oidc-protocolmapper
#   client for abachsip frontend
    - payload:
        clientId: abacship-frontend
        publicClient: "true"
        standardFlowEnabled: "true"
        baseUrl: "{{ externalUrl }}"
        protocol: openid-connect
        redirectUris:
        - "{{ externalUrl }}/*"
        webOrigins:
        - "+"
        attributes:
          post.logout.redirect.uris: "+"
      mappers:
      - protocol: openid-connect
        config:
          id.token.claim: "false"
          access.token.claim: "false"
          userinfo.token.claim: "true"
          remote.parameters.username: "true"
          remote.parameters.clientid: "true"
          client.publickey: X-VirtruPubKey
          claim.name: tdf_claims
        name: Virtru OIDC UserInfo Mapper
        protocolMapper: virtru-oidc-protocolmapper
      - protocol: openid-connect
        config:
          id.token.claim: "true"
          access.token.claim: "true"
          userinfo.token.claim: "false"
          remote.parameters.username: "true"
          remote.parameters.clientid: "true"
          client.publickey: X-VirtruPubKey
          claim.name: tdf_claims
        name: Virtru OIDC Auth Mapper
        protocolMapper: virtru-oidc-protocolmapper
#   client for todo-react-client
    - payload:
        clientId: todo-react-client
        publicClient: "true"
        standardFlowEnabled: "true"
        serviceAccountsEnabled: "true"
        protocol: openid-connect
        redirectUris:
        - "{{ externalUrl }}/*"
        webOrigins:
        - "+"
      mappers:
        - protocol: openid-connect
          config:
            id.token.claim: "false"
            access.token.claim: "false"
            userinfo.token.claim: "true"
            remote.parameters.username: "true"
            remote.parameters.clientid: "true"
            client.publickey: X-VirtruPubKey
            claim.name: tdf_claims
          name: Virtru OIDC UserInfo Mapper
          protocolMapper: virtru-oidc-protocolmapper
        - protocol: openid-connect
          config:
            id.token.claim: "true"
            access.token.claim: "true"
            userinfo.token.claim: "false"
            remote.parameters.username: "true"
            remote.parameters.clientid: "true"
            client.publickey: X-VirtruPubKey
            claim.name: tdf_claims
          name: Virtru OIDC Auth Mapper
          protocolMapper: virtru-oidc-protocolmapper
#   client for secure-remote-storage
    - payload:
        clientId: secure-remote-storage-client
        publicClient: "true"
        standardFlowEnabled: "true"
        baseUrl: "{{ externalUrl }}/"
        protocol: openid-connect
        redirectUris:
        - "{{ externalUrl }}/*"
        webOrigins:
        - "+"
        attributes:
          post.logout.redirect.uris: "+"
          user.info.response.signature.alg: RS256
      mappers:
      - protocol: openid-connect
        config:
          id.token.claim: "false"
          access.token.claim: "false"
          userinfo.token.claim: "true"
          remote.parameters.username: "true"
          remote.parameters.clientid: "true"
          client.publickey: X-VirtruPubKey
          claim.name: tdf_claims
        name: Virtru OIDC UserInfo Mapper
        protocolMapper: virtru-oidc-protocolmapper
      - protocol: openid-connect
        config:
          id.token.claim: "true"
          access.token.claim: "true"
          userinfo.token.claim: "false"
          remote.parameters.username: "true"
          remote.parameters.clientid: "true"
          client.publickey: X-VirtruPubKey
          claim.name: tdf_claims
        name: Virtru OIDC Auth Mapper
        protocolMapper: virtru-oidc-protocolmapper
#   client for web-app
    - payload:
        clientId: web-app-client
        directAccessGrantsEnabled: "true"
        clientAuthenticatorType: client-secret
        secret: "123-456"
        serviceAccountsEnabled: "true"
        publicClient: "false"
        redirectUris:
        - "{{ externalUrl }}/*"
        attributes:
          user.info.response.signature.alg: RS256
          post.logout.redirect.uris: "+"
      mappers:
      - protocol: openid-connect
        config:
          id.token.claim: "false"
          access.token.claim: "false"
          userinfo.token.claim: "true"
          remote.parameters.username: "true"
          remote.parameters.clientid: "true"
          client.publickey: X-VirtruPubKey
          claim.name: tdf_claims
        name: Virtru OIDC UserInfo Mapper
        protocolMapper: virtru-oidc-protocolmapper
      - protocol: openid-connect
        config:
          id.token.claim: "true"
          access.token.claim: "true"
          userinfo.token.claim: "false"
          remote.parameters.username: "true"
          remote.parameters.clientid: "true"
          client.publickey: X-VirtruPubKey
          claim.name: tdf_claims
        name: Virtru OIDC Auth Mapper
        protocolMapper: virtru-oidc-protocolmapper
      - protocol: openid-connect
        config:
          id.token.claim: "false"
          access.token.claim: "true"
          included.custom.audience: "tdf-attributes"
        name: Virtru "tdf-attributes" Audience Mapper
        protocolMapper: oidc-audience-mapper


    users:
# webcam-app users
    - payload:
        username: alice
        enabled: "true"
        credentials:
          - value: myuserpassword
            type: password
    - payload:
        username: bob
        enabled: "true"
        credentials:
          - value: myuserpassword
            type: password
    - payload:
        username: carol
        enabled: "true"
        credentials:
          - value: myuserpassword
            type: password
    - payload:
        username: chuck
        enabled: "true"
        credentials:
        - value: myuserpassword
          type: password
    - payload:
        username: david
        enabled: "true"
        credentials:
        - value: myuserpassword
          type: password
    - payload:
        username: eve
        enabled: "true"
        credentials:
        - value: myuserpassword
          type: password
    - payload:
        username: ted
        enabled: "true"
        credentials:
        - value: myuserpassword
          type: password
      roles:
      - view-clients
      - view-users
# general test users
    - payload:
        username: user1
        enabled: "true"
        credentials:
        - value: testuser123
          type: password
      roles:
      - view-clients
      - view-users
    - payload:
        username: user2
        enabled: "true"
        credentials:
        - value: testuser123
          type: password
      roles:
      - view-clients
      - view-users
# abacship backend users
    - payload:
        username: abacship-backend-user
        enabled: "true"
        credentials:
        - value: testuser123
          type: password
      roles:
      - view-clients
      - view-users

attributes:
  hostname: http://attributes:4020
  realm: tdf
  clientId: bootstrap-client
  username: ted
  password: myuserpassword
  preloadedAuthorities:
    - https://example.com
    - https://todo.com
    - http://demo.com
  preloadedAttributes:
  # general testing attributes
  - authority: https://example.com
    name: Classification
    rule: hierarchy
    state: published
    order:
    - TS
    - S
    - C
    - U
  - authority: https://example.com
    name: COI
    rule: allOf
    state: published
    order:
    - PRX
    - PRA
    - PRB
    - PRC
    - PRD
    - PRF
  - authority: https://todo.com
    name: platform
    rule: allOf
    state: published
    order:
    - developer
  - authority: https://todo.com
    name: saas
    rule: allOf
    state: published
    order:
    - developer
  # webcam-app attributes
  - authority: https://example.com
    name: ContentExclusivity
    rule: hierarchy
    state: published
    order:
    - Deluxe
    - Premium
    - Basic
  - authority: https://example.com
    name: AudienceGuidance
    rule: hierarchy
    state: published
    order:
    - Restricted
    - Parental
    - All
  # tagging-pdp attributes
  - authority: http://demo.com
    name: Classification
    rule: hierarchy
    state: published
    order:
      - TopSecret
      - Secret
      - Confidential
      - Unclassified
  - authority: http://demo.com
    name: needToKnow
    rule: allOf
    state: published
    order: ["AAA", "BBB", "INT", "OPS"]
  - authority: http://demo.com
    name: relto
    rule: anyOf
    state: published
    order: ["USA", "ABW", "AFG", "AGO", "AIA", "ALA", "ALB", "AND", "ARE",
            "ARG", "ARM", "ASM", "ATA", "ATF", "ATG", "AUS", "AUT", "AZE",
            "BDI", "BEL", "BEN", "BES", "BFA", "BGD", "BGR", "BHR", "BHS",
            "BIH", "BLM", "BLR", "BLZ", "BMU", "BOL", "BRA", "BRB", "BRN",
            "BTN", "BVT", "BWA", "CAF", "CAN", "CCK", "CHE", "CHL", "CHN",
            "CIV", "CMR", "COD", "COG", "COK", "COL", "COM", "CPV", "CRI",
            "CUB", "CUW", "CXR", "CYM", "CYP", "CZE", "DEU", "DJI", "DMA",
            "DNK", "DOM", "DZA", "ECU", "EGY", "ERI", "ESH", "ESP", "EST",
            "ETH", "FIN", "FJI", "FLK", "FRA", "FRO", "FSM", "GAB", "GBR",
            "GEO", "GGY", "GHA", "GIB", "GIN", "GLP", "GMB", "GNB", "GNQ",
            "GRC", "GRD", "GRL", "GTM", "GUF", "GUM", "GUY", "HKG", "HMD",
            "HND", "HRV", "HTI", "HUN", "IDN", "IMN", "IND", "IOT", "IRL",
            "IRN", "IRQ", "ISL", "ISR", "ITA", "JAM", "JEY", "JOR", "JPN",
            "KAZ", "KEN", "KGZ", "KHM", "KIR", "KNA", "KOR", "KWT", "LAO",
            "LBN", "LBR", "LBY", "LCA", "LIE", "LKA", "LSO", "LTU", "LUX",
            "LVA", "MAC", "MAF", "MAR", "MCO", "MDA", "MDG", "MDV", "MEX",
            "MHL", "MKD", "MLI", "MLT", "MMR", "MNE", "MNG", "MNP", "MOZ",
            "MRT", "MSR", "MTQ", "MUS", "MWI", "MYS", "MYT", "NAM", "NCL",
            "NER", "NFK", "NGA", "NIC", "NIU", "NLD", "NOR", "NPL", "NRU",
            "NZL", "OMN", "PAK", "PAN", "PCN", "PER", "PHL", "PLW", "PNG",
            "POL", "PRI", "PRK", "PRT", "PRY", "PSE", "PYF", "QAT", "REU",
            "ROU", "RUS", "RWA", "SAU", "SDN", "SEN", "SGP", "SGS", "SHN",
            "SJM", "SLB", "SLE", "SLV", "SMR", "SOM", "SPM", "SRB", "SSD",
            "STP", "SUR", "SVK", "SVN", "SWE", "SWZ", "SXM", "SYC", "SYR",
            "TCA", "TCD", "TGO", "THA", "TJK", "TKL", "TKM", "TLS", "TON",
            "TTO", "TUN", "TUR", "TUV", "TWN", "TZA", "UGA", "UKR", "UMI",
            "URY", "UZB", "VAT", "VCT", "VEN", "VGB", "VIR", "VNM", "VUT",
            "WLF", "WSM", "YEM", "ZAF", "ZMB", "ZWE", "FVEY", "NATO", "PINK"]

entitlements:
  hostname: http://entitlements:4030
  realms:
  - name: tdf
    clientId: bootstrap-client
    username: ted
    password: myuserpassword
    preloadedClaims:
      alice:
        - https://example.com/attr/AudienceGuidance/value/Restricted
        - https://example.com/attr/ContentExclusivity/value/Premium
        - https://todo.com/attr/saas/value/developer
      bob:
        - https://example.com/attr/AudienceGuidance/value/All
        - https://example.com/attr/ContentExclusivity/value/Premium
        - https://todo.com/attr/platform/value/developer
      carol:
        - https://todo.com/attr/saas/value/developer
        - https://todo.com/attr/platform/value/developer
      examples-webcam-app:
        - https://example.com/attr/AudienceGuidance/value/Restricted
        - https://example.com/attr/ContentExclusivity/value/Deluxe
      todo-react-client:
        - https://todo.com/attr/saas/value/developer
        - https://todo.com/attr/platform/value/developer
      tdf-client:
        - https://example.com/attr/Classification/value/S
        - https://example.com/attr/COI/value/PRX
        - https://example.com/attr/Env/value/CleanRoom

externalUrl: http://localhost:65432

job:
  backoffLimit: 1
